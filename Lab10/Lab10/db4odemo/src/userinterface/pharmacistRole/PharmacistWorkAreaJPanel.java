package userinterface.pharmacistRole;

import userinterface.ManageMedicineInventory.RequestMedicineSupplyJPanel;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.Enterprise.EnterpriseType;
import Business.Medicine.Medicine;
import Business.Medicine.MedicineDirectory;
import Business.Network.Network;
import Business.Order.Order;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Organization.PharmacistOrganization;
import Business.Organization.ShipmentManagerOrganization;
import Business.Pharmacy.Pharmacy;
import Business.Pharmacy.PharmacyDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.CustomerWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.ManageMedicineInventory.AddToInventoryJPanel;
import userinterface.ManageMedicineInventory.ViewMedicineInventoryPage;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Payal Zanwar
 */
public class PharmacistWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PharmacistWorkAreaJPanel
     */
    
    private JPanel userProcessContainer;
    private PharmacistOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Pharmacy phar;
    private EcoSystem system;
    private MedicineDirectory med;
    public PharmacistWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, PharmacistOrganization organization, Enterprise enterprise, EcoSystem system) {
        initComponents();
    
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.system=system;
       //phar=new Pharmacy();
       pharmacynametxt.setText(enterprise.getName());
       
       for (Network network : system.getNetworkList()) {
          //   RegionCombo.addItem(network);
           for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
               Enterprise.EnterpriseType  type =e.getEnterpriseType();
//           if(type.equals(type.Pharmacy))
          // enterpriseCombo.addItem(e);
           }
       }
       
       populateTable();
    }

    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel)workRequestJTable.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getSender().getUsername();
            row[2] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName(); 
            row[3] = request.getStatus();
            model.addRow(row);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        container = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        refreshJButton = new javax.swing.JButton();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pharmacynametxt = new javax.swing.JTextField();
        requestMedBtn = new javax.swing.JButton();
        viewInventoryBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setLayout(new java.awt.CardLayout());

        container.setLayout(null);

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        container.add(jScrollPane1);
        jScrollPane1.setBounds(57, 169, 610, 130);

        refreshJButton.setBackground(new java.awt.Color(255, 255, 255));
        refreshJButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        refreshJButton.setForeground(new java.awt.Color(0, 51, 102));
        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        container.add(refreshJButton);
        refreshJButton.setBounds(537, 106, 130, 25);

        assignJButton.setBackground(new java.awt.Color(255, 255, 255));
        assignJButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        assignJButton.setForeground(new java.awt.Color(0, 51, 102));
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        container.add(assignJButton);
        assignJButton.setBounds(10, 320, 157, 47);

        processJButton.setBackground(new java.awt.Color(255, 255, 255));
        processJButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        processJButton.setForeground(new java.awt.Color(0, 51, 102));
        processJButton.setText("Ready To Ship");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        container.add(processJButton);
        processJButton.setBounds(180, 320, 116, 47);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pharmacist Work Area");
        container.add(jLabel1);
        jLabel1.setBounds(0, 0, 733, 40);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Pharmacy");
        container.add(jLabel2);
        jLabel2.setBounds(57, 100, 97, 29);

        pharmacynametxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pharmacynametxtActionPerformed(evt);
            }
        });
        container.add(pharmacynametxt);
        pharmacynametxt.setBounds(164, 97, 128, 32);

        requestMedBtn.setBackground(new java.awt.Color(255, 255, 255));
        requestMedBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        requestMedBtn.setForeground(new java.awt.Color(0, 51, 102));
        requestMedBtn.setText("Request Mediciene Supply");
        requestMedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestMedBtnActionPerformed(evt);
            }
        });
        container.add(requestMedBtn);
        requestMedBtn.setBounds(310, 320, 211, 48);

        viewInventoryBtn.setBackground(new java.awt.Color(255, 255, 255));
        viewInventoryBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        viewInventoryBtn.setForeground(new java.awt.Color(0, 51, 102));
        viewInventoryBtn.setText("View Inventory");
        viewInventoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewInventoryBtnActionPerformed(evt);
            }
        });
        container.add(viewInventoryBtn);
        viewInventoryBtn.setBounds(540, 320, 139, 51);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/pharmacistRole/medicine.png"))); // NOI18N
        container.add(jLabel3);
        jLabel3.setBounds(-10, -6, 750, 520);

        add(container, "card2");
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(container, "Please an order");
            return;
        }

        WorkRequest request = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        populateTable();
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(container, "Please select an order");
            return;
        }
        WorkRequest request1 = (WorkRequest)workRequestJTable.getValueAt(selectedRow, 0);
        CustomerWorkRequest request = (CustomerWorkRequest)workRequestJTable.getValueAt(selectedRow, 0);

        if (!request1.getReceiver().equals(userAccount)){
            JOptionPane.showMessageDialog(container, "This order is not assigned to you yet.");
            return;
        }

        for(Order order :request.getOrderlist())
        {

            for (Medicine m : med.getMedicineList()) {

                if (m.getBrand().equalsIgnoreCase(order.getItem().getBrand())

                    && m.getSaltname().equalsIgnoreCase(order.getItem().getProduct_name())
                    && request.getStatus().equalsIgnoreCase("pending")) {
                    System.out.println("if me aaya");

                    if(m.getUnits() >= (order.getItem().getQuantity()))
                    {
                        m.setUnits(m.getUnits()-((order.getItem().getQuantity())));

                        Organization org = null;
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof ShipmentManagerOrganization) {
                                org = organization;

                                break;
                            }
                        }

                        request.setStatus("Ready To Ship");
                        org.getWorkQueue().getWorkRequestList().add(request);

                        JOptionPane.showMessageDialog(this, "Units Updated In Inventory");
                        break;}
                    else

                    {JOptionPane.showMessageDialog(container,"Insufficient stock in the inventory");
                        break;}

                }
                else
                if(!request.getStatus().equalsIgnoreCase("pending"))
                {
                    JOptionPane.showMessageDialog(container, "Order not eligible for shipment");
                    break;
                }
                else
                {JOptionPane.showMessageDialog(container,"Out of stock");
                    break;}

            }

        }
    }//GEN-LAST:event_processJButtonActionPerformed

    private void pharmacynametxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pharmacynametxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pharmacynametxtActionPerformed

    private void requestMedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestMedBtnActionPerformed
        // TODO add your handling code here:
        RequestMedicineSupplyJPanel managemed = new RequestMedicineSupplyJPanel(userProcessContainer, organization, enterprise, med, system, userAccount);
        userProcessContainer.add("processWorkRequestJPanel", managemed);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_requestMedBtnActionPerformed

    private void viewInventoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewInventoryBtnActionPerformed
        // TODO add your handling code here:
        ViewMedicineInventoryPage managemed = new ViewMedicineInventoryPage(userProcessContainer, organization, this.enterprise,med);
        userProcessContainer.add("processWorkRequestJPanel", managemed);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewInventoryBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JPanel container;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField pharmacynametxt;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton requestMedBtn;
    private javax.swing.JButton viewInventoryBtn;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
