/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.ManageMedicineInventory;


import userinterface.ManageMedicineInventory.ViewMedicineInventoryPage;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Medicine.Medicine;
import Business.Medicine.MedicineDirectory;
import Business.Network.Network;
import Business.Organization.ManufacturingManagerOrganization;
import Business.Organization.Organization;
import static Business.Organization.Organization.Type.SupplyManager;
import Business.Organization.PharmacistOrganization;
import Business.Organization.SupplyManagerOrganization;
import Business.Pharmacy.Pharmacy;
import Business.Supplier.Supplier;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.MedicineSupplyWorkRequest;
import Business.WorkQueue.WorkRequest;
import static com.sun.corba.se.spi.presentation.rmi.StubAdapter.request;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.BookDirectory;
import userinterface.PatientRole.ViewMedicineDetailsPage;
/**
 *
 * @author Vaishali Tripathi
 */
public class RequestMedicineSupplyJPanel extends javax.swing.JPanel {

    private MedicineDirectory b;
    private BookDirectory b1;
    private Enterprise e;
    private Organization org;
    private final JPanel userProcessContainer;
    private UserAccount user;
    private EcoSystem system;
    /**
     * Creates new form SupplyManagerRequestSupplyJPanel
     */
    public RequestMedicineSupplyJPanel(JPanel userProcessContainer,Organization org,Enterprise e, MedicineDirectory med,EcoSystem system, UserAccount user) {
        initComponents();
       brandNameTxt.setEditable(false);
       brandNameTxt.setForeground(Color.gray);
       medNameTxt.setEditable(false);
       medNameTxt.setForeground(Color.gray);
     
       this.userProcessContainer=userProcessContainer;
       this.e=e;
       this.b = med;
       this.org = org;
       this.user = user;
       this.system = system;
  populateComboBox();
       //phar =new Pharmacy();
       populateTable();

    }
     private void populateComboBox() {
        brandNameCombo.removeAllItems();
        
        SaltNameCombo.removeAllItems();
        int Price=0;
              
        for(Medicine medi : b.getMedicineList()){
             SaltNameCombo.addItem(medi);
             }
        SaltNameCombo.addItem("Other");
        for(Medicine medi : b.getMedicineList()){
             brandNameCombo.addItem(medi.getBrand());
             }
        brandNameCombo.addItem("Other");
        
        for (Medicine.MedicineType type : Medicine.MedicineType.values()) {
           TypeCombo.addItem(type);
        } 
         System.out.println(system.getNetworkList().size());
        for(Network net : system.getNetworkList()){
             netowrkListCombo.addItem(net);
             }
     }
    
    public void populateTable(){
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : user.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[11];
            row[0] = ((MedicineSupplyWorkRequest) request);
            row[1] = ((MedicineSupplyWorkRequest) request).getBrand();
            row[2] = ((MedicineSupplyWorkRequest) request).getQuantity();
            row[3] = ((MedicineSupplyWorkRequest) request).getPrice();
            row[4] = ((MedicineSupplyWorkRequest) request).getSaltc1();
            row[5] = ((MedicineSupplyWorkRequest) request).getSaltc2();
            row[6] = ((MedicineSupplyWorkRequest) request).getSaltc3();
            row[7] = ((MedicineSupplyWorkRequest) request).getMedType();
            row[8] = ((MedicineSupplyWorkRequest) request).getDiseaseName();
            row[9] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
            row[10] = request.getStatus();
                        
            model.addRow(row);
        }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        placeMedSuppReqBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        suppliernametxt = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        netowrkListCombo = new javax.swing.JComboBox<Object>();
        jLabel6 = new javax.swing.JLabel();
        medNameTxt = new javax.swing.JTextField();
        diseasename = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        SaltNameCombo = new javax.swing.JComboBox<Object>();
        jLabel8 = new javax.swing.JLabel();
        brandNameCombo = new javax.swing.JComboBox<String>();
        composition1Txt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        composition2Txt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        composition3Txt = new javax.swing.JTextField();
        PriceTxt = new javax.swing.JTextField();
        brandNameTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Noofunitstxt = new javax.swing.JTextField();
        TypeCombo = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        enterpriseList = new javax.swing.JComboBox<Object>();
        orgCombo = new javax.swing.JComboBox<Object>();
        addToInventoryBtn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        setLayout(null);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 102));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Request For Supply");
        add(jLabel1);
        jLabel1.setBounds(0, 0, 950, 59);

        placeMedSuppReqBtn.setBackground(new java.awt.Color(255, 255, 255));
        placeMedSuppReqBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        placeMedSuppReqBtn.setForeground(new java.awt.Color(0, 51, 102));
        placeMedSuppReqBtn.setText("Place Request");
        placeMedSuppReqBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                placeMedSuppReqBtnActionPerformed(evt);
            }
        });
        add(placeMedSuppReqBtn);
        placeMedSuppReqBtn.setBounds(470, 610, 129, 47);

        backBtn.setBackground(new java.awt.Color(255, 255, 255));
        backBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backBtn.setForeground(new java.awt.Color(0, 51, 102));
        backBtn.setText("<<Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn);
        backBtn.setBounds(310, 610, 96, 47);

        suppliernametxt.setBackground(new java.awt.Color(255, 255, 255));
        suppliernametxt.setForeground(new java.awt.Color(0, 51, 102));
        add(suppliernametxt);
        suppliernametxt.setBounds(10, 70, 212, 41);

        workRequestJTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        workRequestJTable.setForeground(new java.awt.Color(0, 51, 102));
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine Name", "Brand", "Quantity", "Price", "Salt 1", "Salt 2", "Salt 3", "Type", "Disease", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(10, 120, 930, 130);

        netowrkListCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netowrkListComboActionPerformed(evt);
            }
        });
        add(netowrkListCombo);
        netowrkListCombo.setBounds(130, 560, 194, 30);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 51, 102));
        jLabel6.setText("From Network");
        add(jLabel6);
        jLabel6.setBounds(0, 550, 130, 44);

        medNameTxt.setText("Other");
        add(medNameTxt);
        medNameTxt.setBounds(620, 320, 150, 30);
        add(diseasename);
        diseasename.setBounds(360, 520, 184, 30);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 51, 102));
        jLabel7.setText("Disease Name");
        add(jLabel7);
        jLabel7.setBounds(150, 520, 154, 20);

        SaltNameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaltNameComboActionPerformed(evt);
            }
        });
        add(SaltNameCombo);
        SaltNameCombo.setBounds(360, 320, 184, 30);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 51, 102));
        jLabel8.setText("Brand");
        add(jLabel8);
        jLabel8.setBounds(150, 280, 154, 30);

        brandNameCombo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                brandNameComboMouseClicked(evt);
            }
        });
        brandNameCombo.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                brandNameComboInputMethodTextChanged(evt);
            }
        });
        brandNameCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandNameComboActionPerformed(evt);
            }
        });
        add(brandNameCombo);
        brandNameCombo.setBounds(360, 280, 184, 30);
        add(composition1Txt);
        composition1Txt.setBounds(150, 400, 154, 30);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 102));
        jLabel2.setText("Medicine Name ");
        add(jLabel2);
        jLabel2.setBounds(150, 320, 154, 30);
        add(composition2Txt);
        composition2Txt.setBounds(360, 400, 184, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 102));
        jLabel3.setText("Salt Composition ");
        add(jLabel3);
        jLabel3.setBounds(0, 410, 125, 20);
        add(composition3Txt);
        composition3Txt.setBounds(620, 360, 151, 30);
        add(PriceTxt);
        PriceTxt.setBounds(360, 360, 184, 30);

        brandNameTxt.setText("Other");
        brandNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brandNameTxtActionPerformed(evt);
            }
        });
        add(brandNameTxt);
        brandNameTxt.setBounds(620, 280, 150, 30);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 102));
        jLabel4.setText("Price Per Medicine");
        add(jLabel4);
        jLabel4.setBounds(150, 360, 154, 30);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 51, 102));
        jLabel5.setText("Type");
        add(jLabel5);
        jLabel5.setBounds(150, 440, 154, 30);
        add(Noofunitstxt);
        Noofunitstxt.setBounds(360, 480, 184, 30);

        add(TypeCombo);
        TypeCombo.setBounds(360, 440, 184, 30);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 102));
        jLabel9.setText("Number of Units");
        add(jLabel9);
        jLabel9.setBounds(150, 480, 154, 30);

        enterpriseList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterpriseListActionPerformed(evt);
            }
        });
        add(enterpriseList);
        enterpriseList.setBounds(360, 560, 184, 30);

        orgCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orgComboActionPerformed(evt);
            }
        });
        add(orgCombo);
        orgCombo.setBounds(610, 560, 160, 30);

        addToInventoryBtn.setBackground(new java.awt.Color(255, 255, 255));
        addToInventoryBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addToInventoryBtn.setForeground(new java.awt.Color(0, 51, 102));
        addToInventoryBtn.setText("Add to Inventory");
        addToInventoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToInventoryBtnActionPerformed(evt);
            }
        });
        add(addToInventoryBtn);
        addToInventoryBtn.setBounds(780, 80, 160, 40);

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/ManufacturingManagerRole/testtubes.jpg"))); // NOI18N
        add(jLabel10);
        jLabel10.setBounds(-10, 0, 1150, 1100);
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backBtnActionPerformed

    private void placeMedSuppReqBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_placeMedSuppReqBtnActionPerformed
        
        try {
            
        
       String brand;
        
        if(String.valueOf(brandNameCombo.getSelectedItem()).equalsIgnoreCase("Other"))
        { brandNameTxt.setEditable(true);
            brand = brandNameTxt.getText();
        brandNameTxt.setForeground(Color.black);
            
            }
        else
         brand = String.valueOf(brandNameCombo.getSelectedItem());
        
        
        String SaltName;
                if(String.valueOf(SaltNameCombo.getSelectedItem()).equals("Other"))
                {medNameTxt.setEditable(true);
                    SaltName = medNameTxt.getText();
                 medNameTxt.setForeground(Color.black);}
                else
        SaltName = String.valueOf(SaltNameCombo.getSelectedItem());
       
                int Price = Integer.parseInt(PriceTxt.getText());
        
        
        
        String saltc1 = composition1Txt.getText();
        String saltc2 = composition2Txt.getText();
        String saltc3 = composition3Txt.getText();
        
        
        String type =  TypeCombo.getSelectedItem().toString();
        int units = Integer.parseInt(Noofunitstxt.getText());
        String disease = diseasename.getText();
        
        MedicineSupplyWorkRequest request = new MedicineSupplyWorkRequest();
        request.setMedName(SaltName);
        request.setMedType(type);
        request.setBrand(brand);
        request.setPrice(Price);
        request.setQuantity(units);
        request.setDiseaseName(disease);
        request.setSaltc1(saltc1);
        request.setSaltc2(saltc2);
        request.setSaltc3(saltc3);
        request.setMedType(type);
        request.setSender(user);
        request.setStatus("Sent");

        Organization org = null;
        Enterprise e = (Enterprise) enterpriseList.getSelectedItem();
        Organization o = (Organization) orgCombo.getSelectedItem();
        for (Organization organization : e.getOrganizationDirectory().getOrganizationList()){
            
            if(this.org instanceof PharmacistOrganization && o instanceof SupplyManagerOrganization)
            
//            if (organization instanceof SupplyManagerOrganization)
            {
                org = o;
                JOptionPane.showMessageDialog(TypeCombo, "Order Placed!");
                break;
            }
            else if(this.org instanceof SupplyManagerOrganization && o instanceof ManufacturingManagerOrganization)
                
//                if(organization instanceof ManufacturingManagerOrganization)
                {
                org = o;
                //System.out.println("Yeah bitches!!");
                JOptionPane.showMessageDialog(TypeCombo, "Order Placed!");
                break;
            }
            else
            {JOptionPane.showMessageDialog(TypeCombo, "Please select the correct receiver!");
                break;}
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request);
            user.getWorkQueue().getWorkRequestList().add(request);
            System.out.println("Yeah bitches!!");
        }
        populateTable();
        } 
        catch (NumberFormatException e) {
        if(medNameTxt.getText().equals("")||brandNameTxt.getText().equals("")||PriceTxt.getText().equals("")||composition1Txt.getText().equals("")
                ||composition2Txt.getText().equals("")||composition3Txt.getText().equals("")||Noofunitstxt.getText().equals("")||diseasename.getText().equals("")){
            JOptionPane.showMessageDialog(TypeCombo, "All the details are required.");
            return;
        }
        JOptionPane.showMessageDialog(TypeCombo, "Please check the input format.");
        
        }
        
        
    }//GEN-LAST:event_placeMedSuppReqBtnActionPerformed

    private void netowrkListComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netowrkListComboActionPerformed
        // TODO add your handling code here:
        Network network =  (Network) netowrkListCombo.getSelectedItem();
        for(Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()){
             enterpriseList.addItem(ent);
             }
    }//GEN-LAST:event_netowrkListComboActionPerformed

    private void SaltNameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaltNameComboActionPerformed
        // TODO add your handling code here:
        if(String.valueOf(SaltNameCombo.getSelectedItem()).equalsIgnoreCase("Other"))
        { medNameTxt.setEnabled(true);
            medNameTxt.setEditable(true);
            SaltNameCombo.setForeground(Color.gray);
            medNameTxt.setText("");
            medNameTxt.setForeground(Color.black);
        }
        else
        { medNameTxt.setText("Other");
            medNameTxt.setEnabled(false);
            medNameTxt.setForeground(Color.gray);}

    }//GEN-LAST:event_SaltNameComboActionPerformed

    private void brandNameComboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_brandNameComboMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_brandNameComboMouseClicked

    private void brandNameComboInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_brandNameComboInputMethodTextChanged

    }//GEN-LAST:event_brandNameComboInputMethodTextChanged

    private void brandNameComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandNameComboActionPerformed
        // TODO add your handling code here:
        if(String.valueOf(brandNameCombo.getSelectedItem()).equalsIgnoreCase("Other"))
        { brandNameTxt.setEnabled(true);
            brandNameTxt.setEditable(true);
            brandNameCombo.setForeground(Color.gray);
            brandNameTxt.setText("");
            brandNameTxt.setForeground(Color.black);
        }
        else
        {brandNameTxt.setText("Other");
            brandNameTxt.setEnabled(false);
            brandNameTxt.setForeground(Color.gray);}
    }//GEN-LAST:event_brandNameComboActionPerformed

    private void brandNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brandNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brandNameTxtActionPerformed

    private void enterpriseListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterpriseListActionPerformed
        // TODO add your handling code here:
        Enterprise e =  (Enterprise) enterpriseList.getSelectedItem();
        for(Organization ent : e.getOrganizationDirectory().getOrganizationList()){
             orgCombo.addItem(ent);
             }
    }//GEN-LAST:event_enterpriseListActionPerformed

    private void orgComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orgComboActionPerformed
        // TODO add your handling code here:
//        Organization o = (Organization) orgCombo.getSelectedItem();
        
    }//GEN-LAST:event_orgComboActionPerformed

    private void addToInventoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToInventoryBtnActionPerformed
        // TODO add your handling code here:
        
         try {
             
             WorkRequest SaltName =   (WorkRequest) workRequestJTable.getValueAt(workRequestJTable.getSelectedRow(), 0);
             
             if(SaltName.getStatus().equalsIgnoreCase("added"))
             { JOptionPane.showMessageDialog(TypeCombo,"This order is already added to the inventory");
                 return;}
             
             
            String brand = (String) workRequestJTable.getValueAt(workRequestJTable.getSelectedRow(), 1);
             int units = (int) workRequestJTable.getValueAt(workRequestJTable.getSelectedRow(), 2);
            float Price = (float) workRequestJTable.getValueAt(workRequestJTable.getSelectedRow(), 3);
            

            String saltc1 = (String) workRequestJTable.getValueAt(workRequestJTable.getSelectedRow(), 4);
            String saltc2 = (String) workRequestJTable.getValueAt(workRequestJTable.getSelectedRow(), 5);
            String saltc3 = (String) workRequestJTable.getValueAt(workRequestJTable.getSelectedRow(), 6);

            String type = (String) workRequestJTable.getValueAt(workRequestJTable.getSelectedRow(), 7);
            
            String disease = (String) workRequestJTable.getValueAt(workRequestJTable.getSelectedRow(), 8);
             System.out.println("SaltName: "+SaltName);
             System.out.println("brand: "+brand);
             System.out.println("units: "+units);
             System.out.println("Price: "+Price);
             System.out.println("saltc1: "+saltc1);
             System.out.println("saltc2: "+saltc2);
             System.out.println("saltc3: "+saltc3);
             System.out.println("type: "+type);
             System.out.println("disease: "+disease);

            String[] s = new String[9];

            s[0] = brand;
            s[1] = String.valueOf(SaltName);
            s[2] = saltc1;
            s[3] = saltc2;
            s[4] = saltc3;
            s[5] = type;
            s[6] = disease;
            s[7] = String.valueOf(units);
            s[8] = String.valueOf(Price);
            
            for(int i = 0; i<9;i++)
               System.out.println("String s: "+s[i]);
               
            for (Organization organization : e.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof SupplyManagerOrganization) {
                    System.out.println("Entered condition for SupplyManagerOrganization");
                    boolean flag = false;
                    
                    for (Medicine m : b.getSupplierMedicineList()) {
                        System.out.println("Entered for1");
                        if (m.getBrand().equalsIgnoreCase(brand)
                                && m.getSaltComposition1().equalsIgnoreCase(saltc1)
                                && m.getSaltComposition2().equalsIgnoreCase(saltc2)
                                && m.getSaltComposition3().equalsIgnoreCase(saltc3)
                                && m.getSaltname().equalsIgnoreCase(String.valueOf(SaltName))
                                && m.getDisease().equalsIgnoreCase(disease)
                                && m.getType().equalsIgnoreCase(type)
                                && m.getPrice() == (Price)) {
                                m.setUnits(m.getUnits() + units);
                                JOptionPane.showMessageDialog(this, "Units Updated");
                                SaltName.setStatus("Added");
                                populateTable();
                                flag = true;
                                break;
                            }}
                    if (flag == false){
                    for (Medicine m : b.getSupplierMedicineList()) {
                        System.out.println("Entered for2");
                        if (m.getBrand().equalsIgnoreCase(brand)
                                && m.getSaltComposition1().equalsIgnoreCase(saltc1)
                                && m.getSaltComposition2().equalsIgnoreCase(saltc2)
                                && m.getSaltComposition3().equalsIgnoreCase(saltc3)
                                && m.getSaltname().equalsIgnoreCase(String.valueOf(SaltName))
                                && m.getDisease().equalsIgnoreCase(disease)
                                && m.getType().equalsIgnoreCase(type)
                                && m.getPrice() != (Price)) {int selectionButton = JOptionPane.YES_NO_OPTION;
                             int selectionResult = JOptionPane.showConfirmDialog(null, "Price has been changed. Do you want to update the inventory price?","Warning",selectionButton);
                            if (selectionResult == JOptionPane.YES_OPTION) {
                                m.setUnits(m.getUnits() + units);
                                m.setPrice(Price);
                                JOptionPane.showMessageDialog(this, "Units and price updated");
                                SaltName.setStatus("Added");
                                populateTable();
                                flag = true;    
                            }
                            break;
                            }}}
                    if(flag==false){
                        System.out.println("Entered 3");
                        b.AddSupplierMedicine(s);
                        JOptionPane.showMessageDialog(this, "Medicines added successfully!");
                        SaltName.setStatus("Added");
                                populateTable();
                    break;
                        
                    }
                    
                    }
                    
                    

                 else if (organization instanceof PharmacistOrganization) {
                    
                    boolean flag = false;
                    for (Medicine m : b.getMedicineList()) {

                        if (m.getBrand().equalsIgnoreCase(brand)
                                && m.getSaltComposition1().equalsIgnoreCase(saltc1)
                                && m.getSaltComposition2().equalsIgnoreCase(saltc2)
                                && m.getSaltComposition3().equalsIgnoreCase(saltc3)
                                && m.getSaltname().equalsIgnoreCase(String.valueOf(SaltName))
                                && m.getDisease().equalsIgnoreCase(disease)
                                && m.getType().equalsIgnoreCase(type)
                                && m.getPrice() == (Price)) {

                            
                                m.setUnits(m.getUnits() + units);

                                JOptionPane.showMessageDialog(this, "Units Updated");
                                SaltName.setStatus("Added");
                                populateTable();
                                flag = true;
                                break;
                            }}
                    if (flag == false){
                    for (Medicine m : b.getMedicineList()) {
                        if (m.getBrand().equalsIgnoreCase(brand)
                                && m.getSaltComposition1().equalsIgnoreCase(saltc1)
                                && m.getSaltComposition2().equalsIgnoreCase(saltc2)
                                && m.getSaltComposition3().equalsIgnoreCase(saltc3)
                                && m.getSaltname().equalsIgnoreCase(String.valueOf(SaltName))
                                && m.getDisease().equalsIgnoreCase(disease)
                                && m.getType().equalsIgnoreCase(type)
                                && m.getPrice() != (Price)) {int selectionButton = JOptionPane.YES_NO_OPTION;
                             int selectionResult = JOptionPane.showConfirmDialog(null, "Price has been changed. Do you want to update the inventory price?","Warning",selectionButton);
                            if (selectionResult == JOptionPane.YES_OPTION) {
                                m.setUnits(m.getUnits() + units);
                                m.setPrice(Price);
                                JOptionPane.showMessageDialog(this, "Units and price updated");
                                SaltName.setStatus("Added");
                                populateTable();
                                flag = true;    
                            }
                            break;
                            }}}
                    if(flag==false){
                        b.AddMedicine(s);
                        JOptionPane.showMessageDialog(this, "Medicines added successfully!");
                        SaltName.setStatus("Added");
                                populateTable();
                    break;
                        
                    }
                    
                    
                }
            }

        } catch (NumberFormatException e) {
            
            JOptionPane.showMessageDialog(TypeCombo, "Please check the input format.");

        }
        
    }//GEN-LAST:event_addToInventoryBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Noofunitstxt;
    private javax.swing.JTextField PriceTxt;
    private javax.swing.JComboBox<Object> SaltNameCombo;
    private javax.swing.JComboBox TypeCombo;
    private javax.swing.JButton addToInventoryBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JComboBox<String> brandNameCombo;
    private javax.swing.JTextField brandNameTxt;
    private javax.swing.JTextField composition1Txt;
    private javax.swing.JTextField composition2Txt;
    private javax.swing.JTextField composition3Txt;
    private javax.swing.JTextField diseasename;
    private javax.swing.JComboBox<Object> enterpriseList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField medNameTxt;
    private javax.swing.JComboBox<Object> netowrkListCombo;
    private javax.swing.JComboBox<Object> orgCombo;
    private javax.swing.JButton placeMedSuppReqBtn;
    private javax.swing.JLabel suppliernametxt;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
